{"version":3,"sources":["reducers/index.ts","actions/index.ts","components/Picker.tsx","components/Posts.tsx","containers/App.tsx","index.tsx"],"names":["createSlice","slice","initialState","cases","selectSubreddit","state","payload","actions","selectedSubreddit","reducer","selectedSubredditSelectors","selectors","invalidateSub","_","didInvalidate","requestSubPost","isFetching","receiveSubPost","json","items","data","children","map","child","receivedAt","Date","now","posts","postsSelectors","invalidateSubreddit","subreddit","requestPosts","receivePosts","_ref","_ref2","Object","slicedToArray","postsBySubreddit","postsBySubredditSelectors","fetchPostsIfNeeded","dispatch","getState","shouldFetchPosts","fetch","concat","then","response","fetchPosts","Picker","value","onChange","options","react_default","a","createElement","_onChange","_x","apply","this","arguments","toString","e","target","option","key","Posts","post","i","title","App","handleChange","nextSubreddit","_this","props","handleRefreshClick","preventDefault","_this$props","_this$props2","prevProps","_this$props3","_this$props4","lastUpdated","isEmpty","length","components_Picker","toLocaleTimeString","onClick","style","opacity","components_Posts","Component","connect","getSlice","middleware","getDefaultMiddleware","configureStore","store","render","es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.568a2a7d.chunk.js","sourcesContent":["import { createSlice } from '@redux-ts-starter-kit/core';\nimport { IStore } from '..';\n\nexport const {\n  actions: { selectSubreddit },\n  reducer: selectedSubreddit,\n  selectors: selectedSubredditSelectors,\n} = createSlice({\n  slice: 'selectedSubreddit',\n  initialState: 'reactjs',\n  cases: {\n    selectSubreddit: (state, payload: string) => payload,\n  },\n});\ninterface IJson {\n  data: { children: { map: (arg0: (child: { data: any }) => any) => any[] } };\n}\ninterface IPosts {\n  isFetching: boolean;\n  didInvalidate: boolean;\n  items: any[];\n  receivedAt: null | number;\n}\nconst postInitialState: IPosts = {\n  isFetching: false,\n  didInvalidate: false,\n  items: [],\n  receivedAt: null,\n};\n\nexport const {\n  reducer: posts,\n  actions: { invalidateSub, receiveSubPost, requestSubPost },\n  selectors: postsSelectors,\n} = createSlice({\n  cases: {\n    invalidateSub: (state, _: never) => {\n      state.didInvalidate = true;\n    },\n    requestSubPost: (state, _: never) => {\n      state.isFetching = true;\n      state.didInvalidate = false;\n    },\n    receiveSubPost: (state, json: IJson) => {\n      state.isFetching = false;\n      state.didInvalidate = false;\n      state.items = json.data.children.map(child => child.data);\n      state.receivedAt = Date.now();\n    },\n  },\n  initialState: postInitialState,\n});\n\nexport const {\n  reducer: postsBySubreddit,\n  actions: { requestPosts, receivePosts, invalidateSubreddit },\n  selectors: postsBySubredditSelectors,\n} = createSlice({\n  slice: 'postsBySubreddit',\n  cases: {\n    invalidateSubreddit: (state, subreddit: string, _: IStore) => {\n      state[subreddit] = posts(state[subreddit], invalidateSub());\n    },\n    requestPosts: (state, subreddit: string) => {\n      state[subreddit] = posts(state[subreddit], requestSubPost());\n    },\n    receivePosts: (state, [subreddit, json,]: [string, IJson]) => {\n      state[subreddit] = posts(state[subreddit], receiveSubPost(json));\n    },\n  },\n  initialState: {} as { [subreddit: string]: IPosts },\n});\n","import { requestPosts, receivePosts } from '../reducers';\nimport { Dispatch } from 'redux';\n\nexport const REQUEST_POSTS = 'REQUEST_POSTS';\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS';\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT';\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT';\n\nconst fetchPosts = (subreddit: string) => (dispatch: Dispatch) => {\n  dispatch(requestPosts(subreddit));\n  return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n    .then(response => response.json())\n    .then(json => dispatch(receivePosts([subreddit, json,])));\n};\n\nconst shouldFetchPosts = (state: any, subreddit: string) => {\n  const posts = state.postsBySubreddit[subreddit];\n  if (!posts) {\n    return true;\n  }\n  if (posts.isFetching) {\n    return false;\n  }\n  return posts.didInvalidate;\n};\n\nexport const fetchPostsIfNeeded = (subreddit: string) => (\n  dispatch: Dispatch,\n  getState: () => any,\n) => {\n  if (shouldFetchPosts(getState(), subreddit)) {\n    return dispatch(fetchPosts(subreddit) as any);\n  }\n};\n","import React, { FunctionComponent } from 'react';\n\nconst Picker: FunctionComponent<{\n  value: string;\n  onChange: (...arg: any[]) => any;\n  options: string[];\n}> = ({ value, onChange, options }) => (\n  <span>\n    <h1>{value}</h1>\n    <select onChange={e => onChange(e.target.value)} value={value}>\n      {options.map(option => (\n        <option value={option} key={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  </span>\n);\n\nexport default Picker;\n","import React, { FunctionComponent } from 'react';\n\nconst Posts: FunctionComponent<{ posts: Array<{ title: string }> }> = ({\n  posts,\n}) => (\n  <ul>\n    {posts.map((post, i) => (\n      <li key={i}>{post.title}</li>\n    ))}\n  </ul>\n);\n\nexport default Posts;\n","import React, { Component, MouseEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPostsIfNeeded } from '../actions';\nimport Picker from '../components/Picker';\nimport Posts from '../components/Posts';\nimport { Dispatch } from '@redux-ts-starter-kit/core';\nimport {\n  selectSubreddit,\n  invalidateSubreddit,\n  postsSelectors,\n  postsBySubredditSelectors,\n  selectedSubredditSelectors,\n} from '../reducers';\nimport { IStore } from '..';\n\ninterface IAppProps {\n  selectedSubreddit: string;\n  posts: any[];\n  isFetching: boolean;\n  lastUpdated: number | null;\n  dispatch: Dispatch;\n}\n\nclass App extends Component<IAppProps> {\n  public componentDidMount() {\n    const { dispatch, selectedSubreddit } = this.props;\n    dispatch(fetchPostsIfNeeded(selectedSubreddit) as any);\n  }\n\n  public componentDidUpdate(prevProps: IAppProps) {\n    if (prevProps.selectedSubreddit !== this.props.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = this.props;\n      dispatch(fetchPostsIfNeeded(selectedSubreddit) as any);\n    }\n  }\n\n  public handleChange = (nextSubreddit: string) => {\n    this.props.dispatch(selectSubreddit(nextSubreddit));\n  };\n\n  public handleRefreshClick = (e: MouseEvent) => {\n    e.preventDefault();\n\n    const { dispatch, selectedSubreddit } = this.props;\n    dispatch(invalidateSubreddit(selectedSubreddit));\n    dispatch(fetchPostsIfNeeded(selectedSubreddit) as any);\n  };\n\n  public render() {\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props;\n    const isEmpty = posts.length === 0;\n    return (\n      <div>\n        <Picker\n          value={selectedSubreddit}\n          onChange={this.handleChange}\n          options={['reactjs', 'frontend',]}\n        />\n        <p>\n          {lastUpdated && (\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\n            </span>\n          )}\n          {!isFetching && (\n            <button onClick={this.handleRefreshClick}>Refresh</button>\n          )}\n        </p>\n        {isEmpty ? (\n          isFetching ? (\n            <h2>Loading...</h2>\n          ) : (\n            <h2>Empty.</h2>\n          )\n        ) : (\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n            <Posts posts={posts} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IStore) => {\n  const selectedSubreddit = selectedSubredditSelectors.getSlice(state);\n  const postsBySubreddit = postsBySubredditSelectors.getSlice(state);\n  const posts = postsSelectors.items(postsBySubreddit[selectedSubreddit]) || [];\n  const isFetching = postsSelectors.isFetching(\n    postsBySubreddit[selectedSubreddit],\n  );\n  const lastUpdated =\n    postsSelectors.receivedAt(postsBySubreddit[selectedSubreddit]) || null;\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport { render } from 'react-dom';\nimport {\n  configureStore,\n  getDefaultMiddleware,\n} from '@redux-ts-starter-kit/core';\nimport { createLogger } from 'redux-logger';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport { postsBySubreddit, selectedSubreddit } from './reducers';\n\nconst middleware =\n  process.env.NODE_ENV !== 'production'\n    ? [...getDefaultMiddleware(), createLogger(),]\n    : getDefaultMiddleware();\n\nexport interface IStore {\n  postsBySubreddit: ReturnType<typeof postsBySubreddit>;\n  selectedSubreddit: ReturnType<typeof selectedSubreddit>;\n}\n\nconst [store,] = configureStore<IStore>({\n  reducer: {\n    postsBySubreddit,\n    selectedSubreddit,\n  },\n  middleware,\n});\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}